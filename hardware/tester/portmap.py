#!/usr/bin/env python3
# This script auto generates a template portmap based on given peripheral instances
# It's also used to read the portmap file and verify its correctness.

import sys
import subprocess
import os
import re

# Header to be put in portmap config file
portmap_header = """\
//********************************************************************************************************************************
// Use this file to configure port mapping between the Tester, SUT and external interface of the Top System.
// This file was auto-generated by the 'make tester-config' target (portmap.py)
// Port map syntax:
//    Tester.<peripheral_corename>[<peripheral_instance_number>].<peripheral_signal_name> : External
//    SUT.<peripheral_corename>[<peripheral_instance_number>].<peripheral_signal_name> : External
//    Tester.<peripheral_corename>[<peripheral_instance_number>].<peripheral_signal_name> : SUT.<peripheral_corename>[<peripheral_instance_number>].<peripheral_signal_name>
//      or
//    SUT.<peripheral_corename>[<peripheral_instance_number>].<peripheral_signal_name> : Tester.<peripheral_corename>[<peripheral_instance_number>].<peripheral_signal_name>
// Example, to connect UART instance number 1 of SUT to UART instance number 0 of Tester:
//    Tester.UART[0].txd : SUT.UART[1].rxd
//    Tester.UART[0].rxd : SUT.UART[1].txd
//    Tester.UART[0].rts : SUT.UART[1].cts
//    Tester.UART[0].cts : SUT.UART[1].rts
// Example, to connect UART instance number 0 of SUT to a dedicated external interface of the top system: 
//    SUT.UART[0].rxd : External
//    SUT.UART[0].txd : External
//    SUT.UART[0].cts : External
//    SUT.UART[0].rts : External
//********************************************************************************************************************************
// Auto-generated list of signals to be mapped (by default mapped to external interface):
"""

def get_peripherals_vars():
    # Get peripherals list of config.mk
    sut_peripherals = subprocess.run(['make', '--no-print-directory', '-f', root_dir+'/hardware/tester/getVars.mk', 'sut-peripherals', 'SUT_DIR='+root_dir], stdout=subprocess.PIPE)
    tester_peripherals = subprocess.run(['make', '--no-print-directory', '-f', root_dir+'/hardware/tester/getVars.mk', 'tester-peripherals', 'SUT_DIR='+root_dir], stdout=subprocess.PIPE)
    sut_peripherals = sut_peripherals.stdout.decode('ascii').split()
    tester_peripherals = tester_peripherals.stdout.decode('ascii').split()

    # Count how many instances to create of each type of peripheral
    sut_instances_amount = {}
    for i in sut_peripherals:
        sut_instances_amount[i]=sut_peripherals.count(i)
    tester_instances_amount = {}
    for i in tester_peripherals:
        tester_instances_amount[i]=tester_peripherals.count(i)
    #print(sut_instances_amount) #DEBUG

    # Get directories for each submodule
    submodule_directories = {}
    for file in os.listdir(root_dir+"/submodules"):
        if os.path.isdir(root_dir+"/submodules/"+file):
            corename = subprocess.run(['make', '--no-print-directory', '-C', root_dir+'/submodules/'+file, 'corename'], stdout=subprocess.PIPE).stdout.decode('utf-8').replace('\n','')
            submodule_directories[corename] = file
    #print(submodule_directories) #DEBUG

    # Get signals of each peripheral
    peripheral_signals = {}
    for i in {**sut_instances_amount, **tester_instances_amount}:
        peripheral_signals[i] = {}
        pio_file = open(root_dir+"/submodules/"+submodule_directories[i]+"/hardware/include/pio.v", "r") 
        pio_contents = pio_file.readlines() 
        for j in pio_contents:
            signal = re.search("^\s*((?:input)|(?:output))(?:\s|(?:\[.*\]))*(.*),", j)
            if signal is not None:
                peripheral_signals[i][signal.group(2)]=signal.group(1)
        pio_file.close()
    #print(peripheral_signals) #DEBUG
    return sut_peripherals, tester_peripherals, sut_instances_amount, tester_instances_amount, submodule_directories, peripheral_signals

def generate_portmap():
    sut_peripherals, tester_peripherals, sut_instances_amount, tester_instances_amount, submodule_directories, peripheral_signals = get_peripherals_vars()

    # Generate portmap file
    portmap_file = open(root_dir+"/hardware/tester/peripheral_portmap.txt", "w")
    portmap_file.write(portmap_header)

    # Create signals for every peripheral instance
    for corename in sut_instances_amount:
        for i in range(sut_instances_amount[corename]):
            for signal in peripheral_signals[corename]:
                signal = re.sub("\/\*<InstanceName>\*\/_","",signal)
                portmap_file.write("SUT.{}[{}].{} : External\n".format(corename,i,signal))
    portmap_file.write("//Tester peripheral signals (you can remove some of these signals and map them to the SUT signals above instead)\n")
    for corename in tester_instances_amount:
        for i in range(tester_instances_amount[corename]):
            for signal in peripheral_signals[corename]:
                signal = re.sub("\/\*<InstanceName>\*\/_","",signal)
                portmap_file.write("Tester.{}[{}].{} : External\n".format(corename,i,signal))
            


    portmap_file.close()

def create_topsystem():
    sut_peripherals, tester_peripherals, sut_instances_amount, tester_instances_amount, submodule_directories, peripheral_signals = get_peripherals_vars()

    # Array to store if a signal has been mapped
    mapped_signals = {{},{}} # SUT signals and Tester Signals
    for corename in sut_instances_amount:
        mapped_signals[0][corename] = {}
        for i in range(sut_instances_amount[corename]):
            mapped_signals[0][corename][i] = {}
            for signal in peripheral_signals[corename]:
                mapped_signals[0][corename][i][signal] = False
    for corename in tester_instances_amount:
        mapped_signals[1][corename] = {}
        for i in range(tester_instances_amount[corename]):
            mapped_signals[1][corename][i] = {}
            for signal in peripheral_signals[corename]:
                mapped_signals[1][corename][i][signal] = False


    # Read portmap file
    portmap_file = open(root_dir+"/hardware/tester/peripheral_portmap.txt", "r")
    portmap_contents = portmap_file.readlines() 
    portmap_file.close()
    # Parse signals
    for i in portmap_contents:
        if not i.startswith("//"):
            #TODO: finish
            print()


    # Read template file
    topsystem_template_file = open(root_dir+"/hardware/tester/top_system.v", "r") 
    topsystem_contents = topsystem_template_file.readlines() 
    topsystem_template_file.close()

    # Insert headers
    for idx, i in enumerate(topsystem_contents):
        if "PHEADER" in i:
            break;
    idx+=1;
    for i in {**sut_instances_amount, **tester_instances_amount}:
        for file in os.listdir(root_dir+"/submodules/"+submodule_directories[i]+"/hardware/include"):
            if file.endswith(".vh"):
                topsystem_contents.insert(idx, '`include "{}"\n'.format(root_dir+"/submodules/"+submodule_directories[i]+"/hardware/include/"+file))

    # Insert PIO for external interface TODO: Below
    for idx, i in enumerate(topsystem_contents):
        if "PIO" in i:
            break;
    idx+=1;

    # Insert PWIRES to connect SUT and Tester
    for idx, i in enumerate(topsystem_contents):
        if "PWIRES" in i:
            break;
    idx+=1;

    # Insert SUTPORTS to interface with SUT peripherals
    for idx, i in enumerate(topsystem_contents):
        if "SUTPORTS" in i:
            break;
    idx+=1;

    # Insert TESTERPORTS to interface with Tester peripherals
    for idx, i in enumerate(topsystem_contents):
        if "TESTERPORTS" in i:
            break;
    idx+=1;

    print(topsystem_contents)
    # Write topsystem to topsystem_path
    #topsystem_file = open("top_system.v", "w")
    #topsystem_file.writelines(topsystem_contents)
    #topsystem_file.close()

# parse arguments
if len(sys.argv)>2:
    root_dir=sys.argv[2]
    if sys.argv[1] == "generate_config":
       generate_portmap() 
    elif sys.argv[1] == "create_topsystem":
        create_topsystem() 
    else:
        print("Unknown argument.")
else:
    print("Needs two arguments.\nUsage: {} <command> <root_dir>".format(sys.argv[0]))


