def _auto_add_settings(self):
    """Auto-add settings like macros and submodules to the module"""

    # Auto-add VERSION macro if there are software registers
    if self.regs:
        found_version_macro = False
        if self.confs:
            for macro in self.confs:
                if macro["name"] == "VERSION":
                    found_version_macro = True
        if not found_version_macro:
            self.confs.append(
                {
                    "name": "VERSION",
                    "type": "M",
                    "val": "16'h" + copy_srcs.version_str_to_digits(self.version),
                    "min": "NA",
                    "max": "NA",
                    "descr": "Product version. This 16-bit macro uses nibbles to represent decimal numbers using their binary values. The two most significant nibbles represent the integral part of the version, and the two least significant nibbles represent the decimal part. For example V12.34 is represented by 0x1234.",
                }
            )

    if self.regs:
        # Auto-add iob_ctls module, except if use_netlist
        if self.name != "iob_ctls" and not self.use_netlist:
            from iob_ctls import iob_ctls

            iob_ctls.__setup(purpose=self.get_setup_purpose())
        ## Auto-add iob_s_port.vh
        self.__generate({"interface": "iob_s_port"}, purpose=self.get_setup_purpose())
        ## Auto-add iob_s_portmap.vh
        self.__generate(
            {"interface": "iob_s_s_portmap"}, purpose=self.get_setup_purpose()
        )


def _build_regs_table(self):
    """Build registers table.
    :returns csr_gen csr_gen_obj: Instance of csr_gen class
    :returns list reg_table: Register table generated by `get_reg_table` method of `csr_gen_obj`
    """
    # Don't create regs table if module does not have regs
    if not self.regs:
        return None, None

    # Make sure 'general' registers table exists
    general_regs_table = next((i for i in self.regs if i["name"] == "general"), None)
    if not general_regs_table:
        general_regs_table = {
            "name": "general",
            "descr": "General Registers.",
            "regs": [],
        }
        self.regs.append(general_regs_table)

    # Add 'VERSION' register if this is the first time we are setting up this core
    # (The register will already be present on subsequent setups)
    if len(self._setup_purpose) < 2:
        # Auto add 'VERSION' register in 'general' registers table if it doesn't exist
        # If it does exist, give an error
        for reg in general_regs_table["regs"]:
            if reg["name"] == "VERSION":
                raise Exception(
                    self.name + ": Register 'VERSION' is reserved. Please remove it."
                )
            else:
                general_regs_table["regs"].append(
                    {
                        "name": "VERSION",
                        "type": "R",
                        "n_bits": 16,
                        "rst_val": copy_srcs.version_str_to_digits(self.version),
                        "addr": -1,
                        "log2n_items": 0,
                        "autoreg": True,
                        "descr": "Product version.  This 16-bit register uses nibbles to represent decimal numbers using their binary values. The two most significant nibbles represent the integral part of the version, and the two least significant nibbles represent the decimal part. For example V12.34 is represented by 0x1234.",
                    }
                )

    # Create an instance of the csr_gen class inside the csr_gen module
    # This instance is only used locally, not affecting status of csr_gen imported in other functions/modules
    csr_gen_obj = csr_gen.csr_gen()
    csr_gen_obj.config = self.confs
    # Get register table
    reg_table = csr_gen_obj.get_reg_table(self.regs, self.rw_overlap, self.autoaddr)

    return csr_gen_obj, reg_table


def _generate_hw(self, csr_gen_obj, reg_table):
    """Generate common hardware files"""
    if self.regs:
        csr_gen_obj.write_hwheader(reg_table, self.build_dir + "/hardware/src", self.name)
        csr_gen_obj.write_lparam_header(
            reg_table, self.build_dir + "/hardware/simulation/src", self.name
        )
        if not self.use_netlist:
            csr_gen_obj.write_hwcode(
                reg_table,
                self.build_dir + "/hardware/src",
                self.name,
                self.csr_if,
            )


def _generate_sw(self, csr_gen_obj, reg_table):
    """Generate common software files"""
    if self.is_system or self.regs:
        os.makedirs(self.build_dir + "/software/src", exist_ok=True)
        if self.regs:
            csr_gen_obj.write_swheader(
                reg_table, self.build_dir + "/software/src", self.name
            )
            csr_gen_obj.write_swcode(
                reg_table, self.build_dir + "/software/src", self.name
            )
            csr_gen_obj.write_swheader(
                reg_table, self.build_dir + "/software/src", self.name
            )
        config_gen.conf_h(self.confs, self.name, self.build_dir + "/software/src")


def _build_regs_table(self):
    """Build registers table.
    :returns csr_gen csr_gen_obj: Instance of csr_gen class
    :returns list reg_table: Register table generated by `get_reg_table` method of `csr_gen_obj`
    """
    # Don't create regs table if module does not have regs
    if not self.regs:
        return None, None

    # Make sure 'general' registers table exists
    general_regs_table = next((i for i in self.regs if i["name"] == "general"), None)
    if not general_regs_table:
        general_regs_table = {
            "name": "general",
            "descr": "General Registers.",
            "regs": [],
        }
        self.regs.append(general_regs_table)

    # Add 'VERSION' register if this is the first time we are setting up this core
    # (The register will already be present on subsequent setups)
    if len(self._setup_purpose) < 2:
        # Auto add 'VERSION' register in 'general' registers table if it doesn't exist
        # If it does exist, give an error
        for reg in general_regs_table["regs"]:
            if reg["name"] == "VERSION":
                raise Exception(
                    self.name + ": Register 'VERSION' is reserved. Please remove it."
                )
        else:
            general_regs_table["regs"].append(
                {
                    "name": "VERSION",
                    "type": "R",
                    "n_bits": 16,
                    "rst_val": copy_srcs.version_str_to_digits(self.version),
                    "addr": -1,
                    "log2n_items": 0,
                    "autoreg": True,
                    "descr": "Product version.  This 16-bit register uses nibbles to represent decimal numbers using their binary values. The two most significant nibbles represent the integral part of the version, and the two least significant nibbles represent the decimal part. For example V12.34 is represented by 0x1234.",
                }
            )

    # Create an instance of the csr_gen class inside the csr_gen module
    # This instance is only used locally, not affecting status of csr_gen imported in other functions/modules
    csr_gen_obj = csr_gen.csr_gen()
    csr_gen_obj.config = self.confs
    # Get register table
    reg_table = csr_gen_obj.get_reg_table(self.regs, self.rw_overlap, self.autoaddr)

    return csr_gen_obj, reg_table


def _generate_hw(self, csr_gen_obj, reg_table):
    """Generate common hardware files"""
    if self.regs:
        csr_gen_obj.write_hwheader(reg_table, self.build_dir + "/hardware/src", self.name)
        csr_gen_obj.write_lparam_header(
            reg_table, self.build_dir + "/hardware/simulation/src", self.name
        )
        if not self.use_netlist:
            csr_gen_obj.write_hwcode(
                reg_table,
                self.build_dir + "/hardware/src",
                self.name,
                self.csr_if,
            )


def _generate_sw(self, csr_gen_obj, reg_table):
    """Generate common software files"""
    if self.is_system or self.regs:
        os.makedirs(self.build_dir + "/software/src", exist_ok=True)
        if self.regs:
            csr_gen_obj.write_swheader(
                reg_table, self.build_dir + "/software/src", self.name
            )
            csr_gen_obj.write_swcode(
                reg_table, self.build_dir + "/software/src", self.name
            )
            csr_gen_obj.write_swheader(
                reg_table, self.build_dir + "/software/src", self.name
            )
            config_gen.conf_h(self.confs, self.name, self.build_dir + "/software/src")


# insert main here
def reg_gen(self):
    """Generate hw, sw and doc files"""
    csr_gen_obj, reg_table = self._build_regs_table()
    self._generate_hw(csr_gen_obj, reg_table)
    self._generate_sw(csr_gen_obj, reg_table)
    self._generate_doc(csr_gen_obj, reg_table)
    self._generate_ipxact(reg_table)
    self._auto_add_settings()
