from dataclasses import dataclass
from typing import Dict, List

import iob_colors
from iob_wire import iob_wire, create_wire


@dataclass
class iob_port(iob_wire):
    """Describes an IO port."""

    # Module's internal wire that connects this port
    i_connect: iob_wire = None
    # External wire that connects this port
    e_connect: iob_wire = None

    """ 'if_gen' related arguments """
    # Type of interface: 'master', 'slave' or '' (for neither)
    type: str = "master"
    # Prefix for ports generated by 'if_gen'
    port_prefix: str = ""

    doc_only: bool = False

    def __post_init__(self):
        for signal in self.signals:
            if not signal["direction"]:
                raise Exception("Port direction is required")
            elif signal["direction"] not in ["input", "output", "inout"]:
                raise Exception(
                    "Error: Direction must be 'input', 'output', or 'inout'."
                )

    def connect_external(self, wire):
        """Connects the port to an external wire"""
        self.e_connect = wire


def create_port(core, *args, **kwargs):
    """Creates a new port object and adds it to the core's port list
    Also creates a new internal module wire to connect to the new port
    param core: core object
    """
    # Ensure 'ports' list exists
    core.set_default_attribute("ports", [])
    create_wire(core, *args, **kwargs)
    wire = core.wires[-1]
    port = iob_port(*args, i_connect=wire, **kwargs)
    core.ports.append(port)


def find_port(core, name):
    """Return the port object with the given name from a core"""
    for port in core.ports:
        if port.name == name:
            return port
    raise Exception(
        f"{iob_colors.FAIL}Port '{name}' of '{core.name}' not found!{iob_colors.ENDC}"
    )
